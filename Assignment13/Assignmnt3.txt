Assignment 3
Name :Dipak Chaudhari
Roll No:edac069



What is Java?
Java is a general-purpose, class-based, object-oriented programming language designed for having lesser implementation dependencies. It is a computing platform for application development. Java is fast, secure, and reliable, therefore. It is widely used for developing Java applications in laptops, data centers, game consoles, scientific supercomputers, cell phones, etc.
2. What is a package in Java? List down various advantages of packages.
A package in Java is used to group related classes. Think of it as a folder in a file directory. We use packages to avoid name conflicts, and to write a better maintainable code. Packages are divided into two categories:
Built-in Packages (packages from the Java API)
Advantages
1) Java package is used to categorize the classes and interfaces so that they can be easily maintained.
 2) Java package provides access protection. 
3) Java package removes naming collision.-defined Packages (create your own packages)

3. Explain JDK, JRE and JVM?
Java Virtual machine (JVM) is the virtual machine that runs the Java bytecodes. You get this bytecode by compiling the .java files into .class files. .class files contain the bytecodes understood by the JVM.

The Java Runtime Environment (JRE) is a software package which bundles the libraries (jars) and the Java Virtual Machine, and other components to run applications written in the Java. JVM is just a part of JRE distributions.To execute any Java application, you need JRE installed in the machine. It’s the minimum requirement to run Java applications on any computer.
JDK is a superset of JRE. JDK contains everything that JRE has along with development tools for developing, debugging, and monitoring Java applications. You need JDK when you need to develop Java applications.
4. Explain public static void main(String args[]) in Java.
n Java programs, the point from where the program starts its execution or simply the entry point of Java programs is the main() method. Hence, it is one of the most important methods of Java and having proper understanding of it is very important.

Most common syntax of main() method:


class GeeksforGeeks {
    public static void main(String[] args)
    {
        System.out.println("I am a Geek");
    }
}
I am a Geek
Explanation:
Every word in the public static void main statement has got a meaning to the JVM.

Public: It is an Access modifier, which specifies from where and who can access the method. Making the main() method public makes it globally available. It is made public so that JVM can invoke it from outside the class as it is not present in the current class.

class GeeksforGeeks {
    private static void main(String[] args)
    {
        System.out.println("I am a Geek");
    }
}
Error: Main method not found in class, please define the main method as:
public static void main(String[] args)
or a JavaFX application class must extend javafx.application.Application
Static: It is a keyword which is when associated with a method, makes it a class related method. The main() method is static so that JVM can invoke it without instantiating the class. This also saves the unnecessary wastage of memory which would have been used by the object declared only for calling the main() method by the JVM.

class GeeksforGeeks {
    public void main(String[] args)
    {
        System.out.println("I am a Geek");
    }
}
Error: Main method is not static in class test, please define the main method as:
public static void main(String[] args)
Void: It is a keyword and used to specify that a method doesn’t return anything. As main() method doesn’t return anything, its return type is void. As soon as the main() method terminates, the java program terminates too. Hence, it doesn’t make any sense to return from main() method as JVM can’t do anything with the return value of it.

class GeeksforGeeks {
    public static int main(String[] args)
    {
        System.out.println("I am a Geek");
        return 1;
    }
}
Error: Main method not found in class, please define the main method as:
public static void main(String[] args)
or a JavaFX application class must extend javafx.application.Application
main: It is the name of Java main method. It is the identifier that the JVM looks for as the starting point of the java program. It’s not a keyword.

class GeeksforGeeks {
    public static void myMain(String[] args)
    {
        System.out.println("I am a Geek");
    }
}
Error: Main method not found in class, please define the main method as:
public static void main(String[] args)
or a JavaFX application class must extend javafx.application.Application
String[] args: It stores Java command line arguments and is an array of type java.lang.String class. Here, the name of the String array is args but it is not fixed and user can use any name in place of it.

class GeeksforGeeks {
    // javac GeeksforGeeks.java
    // java GeeksforGeeks 1 2 3
    public static void main(String[] args)
    {
        for (String elem : args)
            System.out.println(elem);
    }
}
1
2
3
Apart from the above mentioned signature of main, you could use public static void main(String args[]) or public static void main(String… args) to call the main function in java. The main method is called if it’s formal parameter matches that of an array of Strings.

Can main method be int? If no, why?



class GeeksforGeeks {
      
    public static int main(String[] args) {
  
        System.out.println("GeeksforGeeks");
    }
}
Java does not return int implicitly, even if we declare return type of main as int.
We will get compile time error

prg1.java:6: error: missing return statement
}
^
1 error

class GeeksforGeeks {
      
    public static int main(String[] args) {
  
        System.out.println("GeeksforGeeks");
        return 0;
    }
}
Now, even if we do return 0 or integer explicitly ourselves, from int main.
We get run time error.

Error: Main method must return a value of type void in class GeeksforGeeks, please

5. What are the differences between C++ and Java?
C++ uses only compiler, whereas Java uses compiler and interpreter both. C++ supports both operator overloading & method overloading whereas Java only supports method overloading. C++ supports manual object management with the help of new and delete keywords whereas Java has built-in automatic garbage collection.

6. Why Java is platform independent?
A programming language is called platform independent if that program can be run on any platform (operating system). Java is platform-independent because the same java program can run on any operating system.
If you write a code in Java, then the program will be sent to the compiler for compilation. The compiler creates a .class file that is readable for JVM(Java Virtual Machine). Each operating system will have different JVMs, these are responsible for Java to be a platform-independent otherwise java is a platform dependent.

7. What are wrapper classes in Java?
The wrapper classes in Java are used to convert primitive types (int, char, float, etc) into corresponding objects.

8. Why pointers are not used in Java?
because it doesn't need them for general purpose OOP programming. Furthermore, adding pointers to Java would undermine security and robustness and make the language more complex.

9. List some features of Java?
Simple
Object-Oriented
Portable
Platform independent
Secured
Robust
Architecture neutral
Interpreted
High Performance
Multithreaded
Distributed
Dynamic

10.Why is Java Architectural Neutral?
because there are no implementation dependent features, for example, the size of primitive types is fixed. In C programming, int data type occupies 2 bytes of memory for 32-bit architecture and 4 bytes of memory for 64-bit architecture.

11.How Java enabled High Performance?
Java enabled High performance by introducing JIT- Just In Time compiler , JIT helps the compiler to compile the code On demand basis i.e which ever method is called only that method block will get compiled making compilation fast and time-efficient. This makes the java delivering high performance.

12.Why Java is considered dynamic?
Java is considered dynamic because of Bytecode. The source code which is written in one platform that code can be executed in any platform. It loads the class file during runtime only. Hence, any thing that happens in runtime is dynamic.

13.What is Java Virtual Machine and how it is considered in context of Java’s platform independent feature?
Java Virtual Machine (JVM) is a specification that provides runtime environment in which java bytecode(. class files) can be executed. The JVM is the platform. ... JVM makes this possible because it is aware of the specific instruction lengths and other particularities of the platform (Operating System).

14.List two Java IDE’s?
1. Eclipse
2. BlueJ

15.Why Java is called as “Platform” ?
Platform is a software and hardware programs that runs. JAVA is platform independent because it having its own JVM so that it can run on any platform . java is platform independent , which means once written you can run it anywhere. The platform is a hardware or software used to run an application.

16.Is Java Pure-Object oriented Language ?
Java language is not a Pure Object Oriented Language as it contain these properties: Primitive Data Type ex. ... In Smalltalk, primitive values such as integers, booleans and characters are also objects. In Java, we have predefined types as non-objects (primitive types).

17.Which version of java have u learned? Name some of the new features added to it.
Java 13 (released on September 17, 2019) had fewer developer-specific features. Let’s see the new features and improvements, it brought for developers and architects.

JEP 355 – Text Blocks (Preview)
JEP 354 – Switch Expressions Enhancements (Preview)
JEP 353 – Reimplement the Legacy Socket API
JEP 350 – Dynamic CDS Archive
JEP 351 – ZGC: Uncommit Unused Memory
FileSystems.newFileSystem() Method
DOM and SAX Factories with Namespace Support

18.What gives Java its 'write once and run anywhere' nature?
This is all possible because of JVM. How Java is WORA: ... class file), which is interpreted by JVM, so once compiled it generates bytecode file, which can be run anywhere (any machine) which has JVM( Java Virtual Machine) and hence it gets the nature of Write Once and Run Anywhere.

19.Difference between path and classpath.
Path is used define where the system can find the executables(.exe) files and classpath is used to specify the location . class files. path is set for use java tool in your java program like java, javac, javap. ... CLASSPATH is the path for Java application where the classes you compiled will be available.

20.What is the signature of main function in java ?
main(): It is a default signature which is predefined in the JVM. It is called by JVM to execute a program line by line and end the execution after completion of this method. We can also overload the main() method. String args[]: The main() method also accepts some data from the user.

21.What is the difference between JDK and JRE?
JDK is a software development kit whereas JRE is a software bundle that allows Java program to run, whereas JVM is an environment for executing bytecode. The full form of JDK is Java Development Kit, while the full form of JRE is Java Runtime Environment, while the full form of JVM is Java Virtual Machine.

22.What is JVM ? What it does?
A Java virtual machine (JVM) is a virtual machine that enables a computer to run Java programs as well as programs written in other languages that are also compiled to Java bytecode.

23.Why JVM is called as “virtual machine”?
The JVM is "virtual" because it is generally implemented in software on top of a "real" hardware platform and operating system. All Java programs are compiled for the JVM. Therefore, the JVM must be implemented on a particular platform before compiled Java programs will run on that platform.

24.What are the main components of JVM? Explain them. Or Explain JVM
Architecture.
Class Loader: Class loader is a subsystem of JVM. It is used to load class files. Whenever we run the java program, class loader loads it first.

Class method area: It is one of the Data Area in JVM, in which Class data will be stored. Static Variables, Static Blocks, Static Methods, Instance Methods are stored in this area.

Heap: A heap is created when the JVM starts up. It may increase or decrease in size while the application runs.

Stack: JVM stack is known as a thread stack. It is a data area in the JVM memory which is created for a single execution thread. The JVM stack of a thread is used by the thread to store various elements i.e.; local variables, partial results, and data for calling method and returns.

Native stack: It subsumes all the native methods used in your application.

Execution Engine:

JIT compiler
Garbage collector
JIT compiler: The Just-In-Time (JIT) compiler is a part of the runtime environment. It helps in improving the performance of Java applications by compiling bytecodes to machine code at run time. The JIT compiler is enabled by default. When a method is compiled, the JVM calls the compiled code of that method directly. The JIT compiler compiles the bytecode of that method into machine code, compiling it “just in time” to run.

Garbage collector: As the name explains that Garbage Collector means to collect the unused material. Well, in JVM this work is done by Garbage collection. It tracks each and every object available in the JVM heap space and removes unwanted ones.
Garbage collector works in two simple steps known as Mark and Sweep:

Mark – it is where the garbage collector identifies which piece of memory is in use and which are not
Sweep – it removes objects identified during the “mark” phase.
Java Runtime Environment:
The JRE software builds a runtime environment in which Java programs can be executed. The JRE is the on-disk system that takes your Java code, combines it with the needed libraries, and starts the JVM to execute it. The JRE contains libraries and software needed by your Java programs to run. JRE is a part of JDK (which we will study later) but can be downloaded separately.

Java Development Kit:
The Java Development Kit (JDK) is a software development environment used to develop Java applications and applets. It contains JRE and several development tools, an interpreter/loader (java), a compiler (javac), an archiver (jar), a documentation generator (javadoc) accompanied with another tool.

25.What is the difference between Java compiler ( javac ) and JIT ?
When compiling a java program, the static compiler that is run using the command javac converts the source code to byte code which are in the form of . class files. ... JIT compiles the code when it is needed but not before runtime.

26.Is Empty .java file name a valid source file name?
Yes. An empty . java file is a perfectly valid source file. ... java file contain more than one java classes, provided at the most one of them is a public class.

27.Is JRE different for different Platforms ?
Whenever we try to run the code, JVM requires some library set and files for code execution and these files are presented in JRE. JRE = JVM + set of libraries. ... JRE is also platform dependent. That means we have different JRE versions for different platforms.

28.Difference between C++ and java in terms of object creation.
C++ uses only compiler, whereas Java uses compiler and interpreter both. C++ supports both operator overloading & method overloading whereas Java only supports method overloading. C++ supports manual object management with the help of new and delete keywords whereas Java has built-in automatic garbage collection.

29.Who invokes main() function ?
In 'C', the "main" function is called by the operating system when the user runs the program and it is treated the same way as every function, it has a return type. Although you can call the main() function within itself and it is called recursion.

30.What is .class file known as ?
A Java class file is a file (with the . class filename extension) containing Java bytecode that can be executed on the Java Virtual Machine (JVM). A Java class file is usually produced by a Java compiler from Java programming language source files

31.Can we define more than one public class in a java source code ? what is the rule of public class and file name . ?
No, while defining multiple classes in a single Java file you need to make sure that only one class among them is public. If you have more than one public classes a single file a compile-time error will be generated.
In JAVA, class name must always be the same as file name, but sometimes file contains multiple classes. Only single class(or interface) in file can be public, and it must have the same name as file.

32.What is JIT compiler?
The Just-In-Time (JIT) compiler is a an essential part of the JRE i.e. Java Runtime Environment, that is responsible for performance optimization of java based applications at run time. Compiler is one of the key aspects in deciding performance of an application for both parties i.e. the end user and the application developer.

33.How many types of memory areas are allocated by JVM?
JVM has five memory locations namely -

Heap - Runtime storage allocation for objects (reference types).

Stack - Storage for local variables and partial results. A stack contains frames and allocates one for each thread. Once a thread gets completed, this frame also gets destroyed. It also plays roles in method invocation and returns.

PC Registers - Program Counter Registers contains the address of an instruction that JVM is currently executing.

Execution Engine - It has a virtual processor, interpreter to interpret bytecode instructions one by one and a JIT, just in time compiler.

Native method stacks - It contains all the native methods used by the application.

34.What is the rule for local member in java.
Rule for Local Variable
Local variables cannot use any of the access level since their scope is only inside the method. Final is the Only Non Access Modifier that can be applied to a local variable. Local variables are not assigned a default value, hence they need to be initialized.

35.What are the various access specifiers in Java?
Java provides four types of access modifiers or visibility specifiers i.e. default, public, private, and protected. The default modifier does not have any keyword associated with it. When a class or method or variable does not have an access specifier associated with it, we assume it is having default access.

36.What is the rule for local member in java.
Rule for Local Variable
Local variables cannot use any of the access level since their scope is only inside the method. Final is the Only Non Access Modifier that can be applied to a local variable. Local variables are not assigned a default value, hence they need to be initialized.

37.What is native code?
Native code is computer programming (code) that is compiled to run with a particular processor (such as an Intel x86-class processor) and its set of instructions. ... Java bytecode and Microsoft's Intermediate Language can be compiled into native code before execution by a just-in-time compiler for faster performance.

38.Why there is no sizeof operator in java ?
Because the size of primitive types is explicitly mandated by the Java language. There is no variance between JVM implementations.
Moreover, since allocation is done by the new operator depending on its argument there is no need to specify the amount of memory needed

39.What kinds of programs u can develop using Java ?
Application servers.
Web applications.
Unit tests.
Mobile applications.
Desktop applications.
Enterprise applications.

40.U have reference type as a member of class. What is the default value it gets?
The default value of a reference type is null. It means that if a reference type is a static class member or an instance field and not assigned an initial value explicitly, it will be initialized automatically and assigned the value of null. Please note that, in the case of an array, this applies to the array itself and to its reference type components.


41.What is the job done by classloader ?
ClassLoader in Java is a class that is used to load class files in Java. Java code is compiled into a class file by javac compiler and JVM executes Java program, by executing byte codes written in the class file. ClassLoader is responsible for loading class files from file systems, networks, or any other source.

42.Explain the hierarchy of classloaders in java.

ClassLoader is hierarchical in loading a class into memory. Whenever a request is raised to load a class, it delegates it to the parent classloader. This is how uniqueness is maintained in the runtime environment. If the parent class loader doesn’t find the class then the class loader itself tries to load the class

43.What is the role played by Bytecode Verifier ?
The bytecode verifier acts as a sort of gatekeeper: it ensures that code passed to the Java interpreter is in a fit state to be executed and can run without fear of breaking the Java interpreter. Imported code is not allowed to execute by any means until after it has passed the verifier's tests.

44.What are the memory areas allocated by JVM ?
The memory in the JVM divided into 5 different parts:
Class(Method) Area.
Heap.
Stack.
Program Counter Register.
Native Method Stack.

45.What kinds of programs u can develop using Java
Application servers.
Web applications.
Unit tests.
Mobile applications.
Desktop applications.
Enterprise applications.

46.When parseInt() method can be used?
This method is used to get the primitive data type of a certain String. parseXxx() is a static method and can have one argument or two.

47.What is finalized() method ?
Finalize() is the method of Object class. This method is called just before an object is garbage collected. finalize() method overrides to dispose system resources, perform clean-up activities and minimize memory leaks.

48.Difference between C++ pointer and Java reference.
C/C++ allows pointer arithmetic but Java Pointers (References) not
Java doesn’t support pointer explicitly,  But java uses pointer implicitly
Pointers can do arithmetic, References can’t


49.U have reference type as a member of class. What is the default value it gets?
The default value of a reference type is null. It means that if a reference type is a static class member or an instance field and not assigned an initial value explicitly, it will be initialized automatically and assigned the value of null. Please note that, in the case of an array, this applies to the array itself and to its reference type components.


50.What are the expressions allowed in switch block of java ?
A switch works with the byte , short , char , and int primitive data types. It also works with enumerated types (discussed in Enum Types), the String class, and a few special classes that wrap certain primitive types: Character , Byte , Short , and Integer